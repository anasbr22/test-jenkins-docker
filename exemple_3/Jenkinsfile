pipeline {
    agent any

    tools {
        nodejs 'nodejs-23'
    }

    environment {
        IMAGE_NAME = 'calculator-app'
        CONTAINER_NAME = 'calculator-app-container'
        REGISTRY = 'docker.io'
        REPOSITORY = 'anasbr22/calculator-app'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Cloner le repository contenant l'application
                    git url: 'https://github.com/anasbr22/test-jenkins-docker.git', branch: 'main'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // Accéder au dossier 'exemple_3' et installer les dépendances
                    dir('exemple_3') {
                        sh 'npm install'  // Utiliser npm pour installer les dépendances
                    }
                }
            }
        }

        stage('Clean Up Docker') {
            steps {
                script {
                    // Vérifier si un conteneur avec le même nom existe et le supprimer
                    sh '''
                    if [ $(docker ps -a -q -f name=${CONTAINER_NAME}) ]; then
                        docker rm -f ${CONTAINER_NAME}
                    fi

                    // Supprimer l'image Docker si elle existe déjà
                    if [ $(docker images -q ${REGISTRY}/${REPOSITORY}:${IMAGE_NAME}) ]; then
                        docker rmi -f ${REGISTRY}/${REPOSITORY}:${IMAGE_NAME}
                    fi
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Construire l'image Docker avec un nom fixe
                    dir('exemple_3') {
                        sh 'docker build -t ${REGISTRY}/${REPOSITORY}:${IMAGE_NAME} .'
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Vérifier si un conteneur est déjà en cours d'exécution avec ce nom
                    def containerExists = sh(script: "docker ps -q -f name=${CONTAINER_NAME}", returnStdout: true).trim()

                    // Si le conteneur existe, l'arrêter et le supprimer
                    if (containerExists) {
                        sh "docker stop ${CONTAINER_NAME}"
                        sh "docker rm ${CONTAINER_NAME}"
                    }

                    // Lancer un nouveau conteneur
                    sh "docker run -d --name ${CONTAINER_NAME} -p 5000:5000 ${REGISTRY}/${REPOSITORY}:${IMAGE_NAME}"
                    
                    // Afficher l'URL de l'application
                    echo 'Application running at http://localhost:5000'
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline Terminé."
        }
    }
}
